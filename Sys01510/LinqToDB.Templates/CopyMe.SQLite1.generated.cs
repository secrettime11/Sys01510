//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/linq2db).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------

#pragma warning disable 1573, 1591

using System;
using System.Linq;

using LinqToDB;
using LinqToDB.Configuration;
using LinqToDB.Mapping;

namespace DataModels
{
	/// <summary>
	/// Database       : mis
	/// Data Source    : mis
	/// Server Version : 3.24.0
	/// </summary>
	public partial class MisDB : LinqToDB.Data.DataConnection
	{
		public ITable<Employee> Employees { get { return this.GetTable<Employee>(); } }
		public ITable<Folder>   Folders   { get { return this.GetTable<Folder>(); } }
		public ITable<Others>   Others    { get { return this.GetTable<Others>(); } }
		public ITable<Server>   Servers   { get { return this.GetTable<Server>(); } }

		public MisDB()
			: base("mis")
		{
			InitDataContext();
			InitMappingSchema();
		}

		public MisDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
			InitMappingSchema();
		}

		public MisDB(DataOptions options)
			: base(options)
		{
			InitDataContext();
			InitMappingSchema();
		}

		public MisDB(DataOptions<MisDB> options)
			: base(options.Options)
		{
			InitDataContext();
			InitMappingSchema();
		}

		partial void InitDataContext  ();
		partial void InitMappingSchema();
	}

	[Table("employees")]
	public partial class Employee
	{
		[PrimaryKey, NotNull    ] public long   Id        { get; set; } // integer
		[Column,     NotNull    ] public string Name      { get; set; } // text(max)
		[Column,     NotNull    ] public string Team      { get; set; } // text(max)
		[Column,        Nullable] public string Title     { get; set; } // text(max)
		[Column,     NotNull    ] public string PCId      { get; set; } // text(max)
		[Column,     NotNull    ] public string Ip        { get; set; } // text(max)
		[Column,        Nullable] public string Extension { get; set; } // text(max)
	}

	[Table("folder")]
	public partial class Folder
	{
		[PrimaryKey, Identity] public long   ID   { get; set; } // integer
		[Column,     Nullable] public string Item { get; set; } // text(max)
		[Column,     Nullable] public string Path { get; set; } // text(max)
		[Column,     Nullable] public string Fre  { get; set; } // text(max)
	}

	[Table("others")]
	public partial class Others
	{
		[PrimaryKey, Identity] public long   ID       { get; set; } // integer
		[Column,     Nullable] public string Name     { get; set; } // text(max)
		[Column,     Nullable] public string Type     { get; set; } // text(max)
		[Column,     Nullable] public string Account  { get; set; } // text(max)
		[Column,     Nullable] public string Password { get; set; } // text(max)
		[Column,     Nullable] public string Remark   { get; set; } // text(max)
	}

	[Table("server")]
	public partial class Server
	{
		[PrimaryKey, Identity] public long   Id       { get; set; } // integer
		[Column,     Nullable] public string Name     { get; set; } // text(max)
		[Column,     Nullable] public string Ip       { get; set; } // text(max)
		[Column,     Nullable] public string Account  { get; set; } // text(max)
		[Column,     Nullable] public string Password { get; set; } // text(max)
		[Column,     Nullable] public string Remark   { get; set; } // text(max)
	}

	public static partial class TableExtensions
	{
		public static Employee Find(this ITable<Employee> table, long Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Folder Find(this ITable<Folder> table, long ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static Others Find(this ITable<Others> table, long ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static Server Find(this ITable<Server> table, long Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}
	}
}
